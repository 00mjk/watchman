(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{142:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var a=n(1),o=n(9),r=(n(0),n(205)),i={id:"scm-query",title:"Source Control Aware Queries"},c={id:"scm-query",title:"Source Control Aware Queries",description:"*Since 4.9.*",source:"@site/docs/scm-query.md",permalink:"/watchman/docs/scm-query",editUrl:"https://github.com/facebook/watchman/edit/master/website/docs/scm-query.md",sidebar:"sidebar",previous:{title:"Simple Pattern Syntax",permalink:"/watchman/docs/simple-query"},next:{title:"allof",permalink:"/watchman/docs/allof"}},s=[{value:"Source Control Aware Subscriptions",id:"source-control-aware-subscriptions",children:[{value:"<code>state-enter</code> &amp; <code>state-leave</code>",id:"state-enter--state-leave",children:[]}]}],l={rightToc:s};function b(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Since 4.9.")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"The ",Object(r.b)("a",Object(a.a)({parentName:"em"},{href:"capabilities"}),"capability")," name associated with this\nenhanced functionality is ",Object(r.b)("inlineCode",{parentName:"em"},"scm-since"),".")),Object(r.b)("p",null,"At the time of writing, only Mercurial is supported.  The capability name for\nthis is ",Object(r.b)("inlineCode",{parentName:"p"},"scm-hg"),".  The internal architecture allows supporting other source\ncontrol systems quite easily; it just needs someone to implement and test them!"),Object(r.b)("p",null,"A common pattern for tools that consume watchman is wanting to reason about\nthe changes in a version controlled repository.  For most repos it is fine\nto simply receive information about all changed files as they are updated,\neven during a rebase over several days of work by others."),Object(r.b)("p",null,"For very large or very busy repositories, where a great many files can change\nover a short period of time, it can be desirable to get a minimized set of\ninformation about the changes."),Object(r.b)("p",null,"For example, if your tool has the ability to load some pre-built data from\nsome artifact storage, rather than processing many hundreds of changed\nfiles incrementally you may want to take the merge base of local changes\nand use that to locate the pre-built data and process only the delta\nbetween that state and the current state of the repo."),Object(r.b)("p",null,"An illustration may help.  Here we see that a user has a stack of two commits\nbased off the symbolic ",Object(r.b)("inlineCode",{parentName:"p"},"master")," commit.  In this scenario, ",Object(r.b)("inlineCode",{parentName:"p"},"master")," is tracking\nthe tip of the repo to which the local repo is published, and the user is\nchecked out at the 6b38a5 commit:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"| @  6b38a5  wez\n| |  Add cats.cpp\n| |\n| o  fa2e92  wez\n|/   Add cat.jpg\n|\no f12345 master\n")),Object(r.b)("p",null,"Now the user synchronizes their repo with the remote, fetching the commits but\nnot changing their work yet.   This is often combined with the step that follows,\nbut we are breaking it out here for the purposes of illustration.  This is\nequivalent to running ",Object(r.b)("inlineCode",{parentName:"p"},"hg pull")," or ",Object(r.b)("inlineCode",{parentName:"p"},"git fetch"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"o  fabf87  coworker     master\n.  Amazing new feature\n.\n| @  6b38a5  wez\n| |  Add cats.cpp\n| |\n| o  fa2e92  wez\n|/   Add cat.jpg\n|\no\n")),Object(r.b)("p",null,"The ellipsis portion of the DAG represents uninteresting commits to ",Object(r.b)("inlineCode",{parentName:"p"},"wez"),"; there\nmay be hundreds of files changed by those commits, but ",Object(r.b)("inlineCode",{parentName:"p"},"wez")," only cares about the\nwork in their local branch of the DAG."),Object(r.b)("p",null,"Now ",Object(r.b)("inlineCode",{parentName:"p"},"wez")," wants to rebase their work on master.  This would be done using\na command like ",Object(r.b)("inlineCode",{parentName:"p"},"hg rebase -d master -s fa2e92"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"| @  bbbbbb  wez\n| |  Add cats.cpp\n| |\n| o  aaaaaa  wez\n|/   Add cat.jpg\n|\no  fabf87  coworker     master\n.  Amazing new feature\n.\n")),Object(r.b)("p",null,"The crucial part of this is what happens to the working copy; assuming that we now land\non commit ",Object(r.b)("inlineCode",{parentName:"p"},"bbbbbb"),", Watchman will observe changes for all of the hundreds of files that\nchanged across the rebase and pass this information on to the tools that are subscribed\nor are querying for this information."),Object(r.b)("p",null,"If your tooling is source control aware then you can ask watchman to run since queries\nin a mode where it will return you information about the merge base with ",Object(r.b)("inlineCode",{parentName:"p"},"master")," and\nthe minimized set of files that changed."),Object(r.b)("p",null,"To enable this mode you issue a query using a new ",Object(r.b)("em",{parentName:"p"},"fat clock")," as the ",Object(r.b)("inlineCode",{parentName:"p"},"since")," parameter\nfor the query:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ watchman -j <<-EOT\n["query", "/path/to/root", {\n  "since": {\n      "scm": {\n        "mergebase-with": "master"\n      }\n  },\n  "expression": ["type", "f"],\n  "fields": ["name"]\n}]\nEOT\n')),Object(r.b)("p",null,"This particular ",Object(r.b)("inlineCode",{parentName:"p"},"since")," value starts with an unspecified clock value and requests that\nwatchman run the query in source control aware mode, using the symbolic name ",Object(r.b)("inlineCode",{parentName:"p"},"master"),"\nto compute the merge base for the commit graph."),Object(r.b)("p",null,"If we look back to the illustrations above and rewind to the first scenario,\nthe results of this query will look something like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'{\n   "clock": {\n       "clock": "c:123:123",\n       "scm": {\n            "mergebase": "f12345",\n            "mergebase-with": "master"\n       }\n    },\n    "files": ["cat.jpg", "cats.cpp"]\n}\n')),Object(r.b)("p",null,"This result informs the client of the merge base with master (which happens to\nbe master itself) and the list of changes since that merge base."),Object(r.b)("p",null,"To get the next incremental change the client feeds that clock value back in to its\nnext query.  Looking back to the second illustration above, if we were to run this query\nafter the running ",Object(r.b)("inlineCode",{parentName:"p"},"hg pull")," (note that this doesn't change the working copy):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ watchman -j <<-EOT\n["query", "/path/to/root", {\n  "since": {\n       "clock": "c:123:123",\n       "scm": {\n            "mergebase": "f12345",\n            "mergebase-with": "master"\n       }\n  },\n  "expression": ["type", "f"],\n  "fields": ["name"]\n}]\nEOT\n')),Object(r.b)("p",null,"we'd get this result:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'{\n   "clock": {\n       "clock": "c:123:124",\n       "scm": {\n            "mergebase": "f12345",\n            "mergebase-with": "master"\n       }\n    },\n    "files": []\n}\n')),Object(r.b)("p",null,"Note that the ",Object(r.b)("inlineCode",{parentName:"p"},"files")," list is empty because we didn't change any files, and\nnote that one of the numeric portions of the clock string has changed."),Object(r.b)("p",null,"Also note that the mergebase revision remains the same because we also didn't\nrebase the commit yet."),Object(r.b)("p",null,"This is a little white lie: the reality is that some files did change in the\nversion control system, and with the expression we're using we would see them,\nbut they are not part of the working copy so we're omitting them for the clarity\nof this example."),Object(r.b)("p",null,"Now if we rebase and update to the rebased revision (taking us to the last of the\nillustrations from above), we'd run this query, feeding in the clock from the last\nquery to get the correct incremental result:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ watchman -j <<-EOT\n["query", "/path/to/root", {\n  "since": {\n       "clock": "c:123:124",\n       "scm": {\n            "mergebase": "f12345",\n            "mergebase-with": "master"\n       }\n  },\n  "expression": ["type", "f"],\n  "fields": ["name"]\n}]\nEOT\n')),Object(r.b)("p",null,"we'd get this result:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'{\n   "clock": {\n       "clock": "c:123:125",\n       "scm": {\n            "mergebase": "fabf87",\n            "mergebase-with": "master"\n       }\n    },\n    "files": ["cat.jpg", "cats.cpp"]\n}\n')),Object(r.b)("p",null,"Note that the mergebase reported in the clock has changed and note that the\nlist of files reported is just the two from our commit stack despite there\nbeing hundreds of files that were physically updated on the disk."),Object(r.b)("p",null,"Your client can now lookup some state based on the ",Object(r.b)("inlineCode",{parentName:"p"},"fabf87")," revision and\ndownload it, and can then incrementally apply the computation for ",Object(r.b)("inlineCode",{parentName:"p"},"cat.jpg")," and\n",Object(r.b)("inlineCode",{parentName:"p"},"cats.cpp")," on top of that state."),Object(r.b)("p",null,"If your client doesn't know how to do this, then you shouldn't use this\nsource control aware query mode!"),Object(r.b)("h2",{id:"source-control-aware-subscriptions"},"Source Control Aware Subscriptions"),Object(r.b)("p",null,"You can also use the same source control awareness in your subscriptions.  This\nis basically the same procedure as making queries above, but there are some\npreconditions and things to note:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Watchman needs the cooperation of the source control system to know when\nit should defer events.  At the time of writing this is only possible when\nusing Mercurial with the ",Object(r.b)("inlineCode",{parentName:"li"},"fsmonitor")," extension enabled."),Object(r.b)("li",{parentName:"ul"},"Source control aware subscriptions implicitly enable ",Object(r.b)("inlineCode",{parentName:"li"},"defer_vcs")," and\n",Object(r.b)("inlineCode",{parentName:"li"},'defer:["hg.update"]'),".  As with the point above, this is to ensure that\nyou don't get notified about files changing during the working copy update\noperation; that would defeat the point of using source control awareness.")),Object(r.b)("p",null,"To initiate a source control aware subscription:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'["subscribe", "/path/to/root", "mysubscriptionname", {\n  "fields": ["name"],\n  "since": {\n    "scm": {\n      "mergebase-with": "master"\n    }\n  }\n}]\n')),Object(r.b)("p",null,"You'll then receive subscription responses as files change; those responses\nwill contain ",Object(r.b)("em",{parentName:"p"},"fat clock")," values for the ",Object(r.b)("inlineCode",{parentName:"p"},"since")," and ",Object(r.b)("inlineCode",{parentName:"p"},"clock")," fields:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "subscription": "mysubscriptionname",\n  "clock": {\n    "clock": "c:1234:125",\n    "scm": {\n      "mergebase": "fabf87",\n      "mergebase-with": "master",\n    }\n  },\n  "since": {\n    "clock": "c:1234:123",\n    "scm": {\n      "mergebase": "f12345",\n      "mergebase-with": "master",\n    }\n  },\n  "files": ["cat.jpg", "cats.cpp"],\n  "root":  "/path/to/root"\n}\n')),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"clock")," field holds the value of the clock and the merge base as of the subscription\nnotification."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"since")," field holds the ",Object(r.b)("em",{parentName:"p"},"fat clock")," that was returned in the ",Object(r.b)("inlineCode",{parentName:"p"},"clock")," field from\nthe prior subscription update.  It is present as a convenience for you; you can compare\nthe ",Object(r.b)("inlineCode",{parentName:"p"},"mergebase")," fields between the two to determine that the merge base changed in\nthis update.  This is an important detail because more files in the working copy have\nbeen physically changed than are reflected in the ",Object(r.b)("inlineCode",{parentName:"p"},"files")," list; your tooling will need\nto so something appropriate to ensure that it computes a consistent and correct result."),Object(r.b)("h3",{id:"state-enter--state-leave"},Object(r.b)("inlineCode",{parentName:"h3"},"state-enter")," & ",Object(r.b)("inlineCode",{parentName:"h3"},"state-leave")),Object(r.b)("p",null,"Source control aware subscriptions will always include a ",Object(r.b)("em",{parentName:"p"},"fat clock")," in their responses, however,\nonly the regular clock is provided in ",Object(r.b)("inlineCode",{parentName:"p"},"state-enter")," and ",Object(r.b)("inlineCode",{parentName:"p"},"state-leave")," notifications.\nThis is because computing the source control information is a non-trivial operation and\ncould increase latency."))}b.isMDXComponent=!0},205:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),b=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},p=function(e){var t=b(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=b(n),u=a,m=p["".concat(i,".").concat(u)]||p[u]||h[u]||r;return n?o.a.createElement(m,c({ref:t},l,{components:n})):o.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<r;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);