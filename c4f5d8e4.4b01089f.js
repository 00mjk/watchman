(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{181:function(e,t,a){"use strict";a.r(t);var n=a(0),l=a.n(n),s=a(207),r=a.n(s),c=a(210),o=a(209),i=a(206),m=a(208),h=a(182),u=a.n(h);t.default=function(){var e=Object(i.a)().siteConfig,t=void 0===e?{}:e;return l.a.createElement(c.a,{title:t.title+" | "+t.tagline},l.a.createElement("header",{className:r()("hero hero--primary",u.a.heroBanner)},l.a.createElement("div",{className:"container"},l.a.createElement("img",{src:"img/logo.png",alt:"logo",style:{borderRadius:"90%",maxWidth:180}}),l.a.createElement("h1",{className:"hero__title"},t.title),l.a.createElement("p",{className:"hero__subtitle"},t.tagline),l.a.createElement("div",{className:u.a.buttons},l.a.createElement(o.a,{className:r()("button button--outline button--secondary button--lg",u.a.getStarted),to:Object(m.a)("docs/install")},"Get Started")),l.a.createElement("span",{className:u.a.indexCtasGitHubButtonWrapper},l.a.createElement("iframe",{className:u.a.indexCtasGitHubButton,src:"https://ghbtns.com/github-btn.html?user=facebook&repo=watchman&type=star&count=true&size=large",width:160,height:30,title:"GitHub Stars"})))),l.a.createElement("div",{className:"container"},l.a.createElement("section",{className:"row"},l.a.createElement("p",{className:"padding-top--md"},"Watchman exists to watch files and record when they change. It can also trigger actions (such as rebuilding assets) when matching files change.")),l.a.createElement("section",{className:"row"},l.a.createElement("h1",{className:"padding-top--md"},"Concepts"),l.a.createElement("ul",{className:"padding-horiz--md"},l.a.createElement("li",null,"Watchman can recursively watch one or more directory trees (we call them roots)."),l.a.createElement("li",null,"Watchman does not follow symlinks. It knows they exist, but they show up the same as any other file in its reporting."),l.a.createElement("li",null,"Watchman waits for a root to settle down before it will start to trigger notifications or command execution."),l.a.createElement("li",null,"Watchman is conservative, preferring to err on the side of caution; it considers files to be freshly changed when you start to watch them or when it is unsure."),l.a.createElement("li",null,"You can query a root for file changes since you last checked, or the current state of the tree"),l.a.createElement("li",null,"You can subscribe to file changes that occur in a root"))),l.a.createElement("section",{className:"row"},l.a.createElement("h1",{className:"padding-top--md"},"Quick Starter"),l.a.createElement("p",null,"These two lines establish a watch on a source directory and then set up a trigger named buildme that will run a tool named minify-css whenever a CSS file is changed. The tool will be passed a list of the changed filenames."),l.a.createElement("code",null,"$ watchman watch ~/src",l.a.createElement("br",null),"# the single quotes around '*.css' are important!",l.a.createElement("br",null),"$ watchman -- trigger ~/src buildme '*.css' -- minify-css",l.a.createElement("br",null))),l.a.createElement("section",{className:"row"},l.a.createElement("span",{className:"padding-top--md margin-bottom--md"},"The output for buildme will land in the Watchman log file unless you send it somewhere else."))))}}}]);