(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{157:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return b}));var i=t(1),a=t(9),r=(t(0),t(205)),o={id:"nodejs",title:"NodeJS"},c={id:"nodejs",title:"NodeJS",description:"To install the nodejs client:",source:"@site/docs/nodejs.md",permalink:"/watchman/docs/nodejs",editUrl:"https://github.com/facebook/watchman/edit/master/website/docs/nodejs.md",sidebar:"sidebar",previous:{title:"C++ Client",permalink:"/watchman/docs/cppclient"},next:{title:"Configuration Files",permalink:"/watchman/docs/config"}},s=[{value:"Checking for watchman availability",id:"checking-for-watchman-availability",children:[]},{value:"Initiating a watch",id:"initiating-a-watch",children:[]},{value:"Subscribing to changes",id:"subscribing-to-changes",children:[{value:"Subscribing only to changed files",id:"subscribing-only-to-changed-files",children:[]}]},{value:"NodeJS API Reference",id:"nodejs-api-reference",children:[]},{value:"Methods",id:"methods",children:[{value:"client.capabilityCheck(options, done)",id:"clientcapabilitycheckoptions-done",children:[]},{value:"client.command(args , done)",id:"clientcommandargs--done",children:[]},{value:"client.end()",id:"clientend",children:[]}]},{value:"Events",id:"events",children:[{value:"Event: &#39;connect&#39;",id:"event-connect",children:[]},{value:"Event: &#39;error&#39;",id:"event-error",children:[]},{value:"Event: &#39;end&#39;",id:"event-end",children:[]},{value:"Event: &#39;log&#39;",id:"event-log",children:[]},{value:"Event: &#39;subscription&#39;",id:"event-subscription",children:[]}]}],l={rightToc:s};function b(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"To install the nodejs client:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-bash"}),"$ npm install fb-watchman\n")),Object(r.b)("p",null,"and to import it and create a client instance:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"var watchman = require('fb-watchman');\nvar client = new watchman.Client();\n")),Object(r.b)("p",null,"This documentation assumes that you are using the latest available version\nof the ",Object(r.b)("inlineCode",{parentName:"p"},"fb-watchman")," package published to the npm repository."),Object(r.b)("h2",{id:"checking-for-watchman-availability"},"Checking for watchman availability"),Object(r.b)("p",null,"The client can be installed without requiring that the service is installed.\nIt is important to handle lack of availability and also to test whether\nthe installed service supports the ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"capabilities"}),"capabilities"),"\nrequired by your application."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"capabilityCheck")," method issues a ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"version"}),"version")," command to query the capabilities of the\nserver."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"var watchman = require('fb-watchman');\nvar client = new watchman.Client();\nclient.capabilityCheck({optional:[], required:['relative_root']},\n  function (error, resp) {\n    if (error) {\n      // error will be an Error object if the watchman service is not\n      // installed, or if any of the names listed in the `required`\n      // array are not supported by the server\n      console.error(error);\n    }\n    // resp will be an extended version response:\n    // {'version': '3.8.0', 'capabilities': {'relative_root': true}}\n    console.log(resp);\n  });\n")),Object(r.b)("h2",{id:"initiating-a-watch"},"Initiating a watch"),Object(r.b)("p",null,"Almost every operation in watchman revolves around watching a directory tree.\nYou can repeatedly ask to watch the same directory without error; watchman will\nre-use an existing watch."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"var watchman = require('fb-watchman');\nvar client = new watchman.Client();\n\nvar dir_of_interest = \"/some/path\";\n\nclient.capabilityCheck({optional:[], required:['relative_root']},\n  function (error, resp) {\n    if (error) {\n      console.log(error);\n      client.end();\n      return;\n    }\n\n    // Initiate the watch\n    client.command(['watch-project', dir_of_interest],\n      function (error, resp) {\n        if (error) {\n          console.error('Error initiating watch:', error);\n          return;\n        }\n\n        // It is considered to be best practice to show any 'warning' or\n        // 'error' information to the user, as it may suggest steps\n        // for remediation\n        if ('warning' in resp) {\n          console.log('warning: ', resp.warning);\n        }\n\n        // `watch-project` can consolidate the watch for your\n        // dir_of_interest with another watch at a higher level in the\n        // tree, so it is very important to record the `relative_path`\n        // returned in resp\n\n        console.log('watch established on ', resp.watch,\n                    ' relative_path', resp.relative_path);\n      });\n  });\n")),Object(r.b)("h2",{id:"subscribing-to-changes"},"Subscribing to changes"),Object(r.b)("p",null,"Most node applications are interested in subscribing to live file\nchange notifications.  In watchman these are configured by issuing\na ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"subscribe"}),"subscribe")," command.  A subscription\nis valid for the duration of your client connection, or until you cancel\nthe subscription using the ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"unsubscribe"}),"unsubscribe"),"\ncommand."),Object(r.b)("p",null,"The following will generate subscription results for all files in the\ntree that match the query expression and then generate subscription\nresults as files change:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"// `watch` is obtained from `resp.watch` in the `watch-project` response.\n// `relative_path` is obtained from `resp.relative_path` in the\n// `watch-project` response.\nfunction make_subscription(client, watch, relative_path) {\n  sub = {\n    // Match any `.js` file in the dir_of_interest\n    expression: [\"allof\", [\"match\", \"*.js\"]],\n    // Which fields we're interested in\n    fields: [\"name\", \"size\", \"mtime_ms\", \"exists\", \"type\"]\n  };\n  if (relative_path) {\n    sub.relative_root = relative_path;\n  }\n\n  client.command(['subscribe', watch, 'mysubscription', sub],\n    function (error, resp) {\n      if (error) {\n        // Probably an error in the subscription criteria\n        console.error('failed to subscribe: ', error);\n        return;\n      }\n      console.log('subscription ' + resp.subscribe + ' established');\n    });\n\n  // Subscription results are emitted via the subscription event.\n  // Note that this emits for all subscriptions.  If you have\n  // subscriptions with different `fields` you will need to check\n  // the subscription name and handle the differing data accordingly.\n  // `resp`  looks like this in practice:\n  //\n  // { root: '/private/tmp/foo',\n  //   subscription: 'mysubscription',\n  //   files: [ { name: 'node_modules/fb-watchman/index.js',\n  //       size: 4768,\n  //       exists: true,\n  //       type: 'f' } ] }\n  client.on('subscription', function (resp) {\n    if (resp.subscription !== 'mysubscription') return;\n\n    resp.files.forEach(function (file) {\n      // convert Int64 instance to javascript integer\n      const mtime_ms = +file.mtime_ms;\n\n      console.log('file changed: ' + file.name, mtime_ms);\n    });\n  });\n}\n")),Object(r.b)("h3",{id:"subscribing-only-to-changed-files"},"Subscribing only to changed files"),Object(r.b)("p",null,"The example above will generate results for existing (and deleted!) files at\nthe time that the subscription is established.  In some applications this can\nbe undesirable.  The following example shows how to add a logical time constraint."),Object(r.b)("p",null,"watchman tracks changes using an ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"clockspec"}),"abstract clock"),".  We'll determine the current clock at the time\nthat we initiate the watch and then add that as a constraint in our subscription."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),'function make_time_constrained_subscription(client, watch, relative_path) {\n  client.command([\'clock\', watch], function (error, resp) {\n    if (error) {\n      console.error(\'Failed to query clock:\', error);\n      return;\n    }\n\n    sub = {\n      // Match any `.js` file in the dir_of_interest\n      expression: ["allof", ["match", "*.js"]],\n      // Which fields we\'re interested in\n      fields: ["name", "size", "exists", "type"],\n      // add our time constraint\n      since: resp.clock\n    };\n\n    if (relative_path) {\n      sub.relative_root = relative_path;\n    }\n\n    client.command([\'subscribe\', watch, \'mysubscription\', sub],\n      function (error, resp) {\n        // handle the result here\n      });\n  });\n}\n')),Object(r.b)("h2",{id:"nodejs-api-reference"},"NodeJS API Reference"),Object(r.b)("h2",{id:"methods"},"Methods"),Object(r.b)("h3",{id:"clientcapabilitycheckoptions-done"},"client.capabilityCheck(options, done)"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"capabilityCheck")," method issues a ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"version"}),"version")," command to query the capabilities of the\nserver."),Object(r.b)("p",null,"If the server doesn't support capabilities, ",Object(r.b)("inlineCode",{parentName:"p"},"capabilityCheck")," will emulate\nthe capability response for a handful of significant capabilities based\non the version reported by the server."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"options")," argument may contain the following properties:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"optional")," an array listing optional capability names"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"required")," an array listing required capability names")),Object(r.b)("p",null,"The properties are passed through to the underlying ",Object(r.b)("inlineCode",{parentName:"p"},"version")," command."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"done")," parameter is a callback that will be passed (error, result) when the\ncommand completes.  It doesn't make sense to issue a ",Object(r.b)("inlineCode",{parentName:"p"},"capabilityCheck")," call and\nnot provide the ",Object(r.b)("inlineCode",{parentName:"p"},"done")," callback."),Object(r.b)("p",null,"The response object will contain a ",Object(r.b)("inlineCode",{parentName:"p"},"capabilities")," object property whose keys\nwill be the union of the ",Object(r.b)("inlineCode",{parentName:"p"},"optional")," and ",Object(r.b)("inlineCode",{parentName:"p"},"required")," capability names and whose\nvalues will be either ",Object(r.b)("inlineCode",{parentName:"p"},"true")," or ",Object(r.b)("inlineCode",{parentName:"p"},"false")," depending on the availability of the\ncapability name."),Object(r.b)("p",null,"If any of the ",Object(r.b)("inlineCode",{parentName:"p"},"required")," capabilities are not supported by the server, the\n",Object(r.b)("inlineCode",{parentName:"p"},"error")," parameter in the ",Object(r.b)("inlineCode",{parentName:"p"},"done")," callback will be set and will contain a\nmeaningful error message."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"client.capabilityCheck({optional:[], required:['relative_root']},\n  function (error, resp) {\n    if (error) {\n      // error will be an Error object if the watchman service is not\n      // installed, or if any of the names listed in the `required`\n      // array are not supported by the server\n      console.error(error);\n    }\n    // resp will be an extended version response:\n    // {'version': '3.8.0', 'capabilities': {'relative_root': true}}\n    console.log(resp);\n  });\n")),Object(r.b)("h3",{id:"clientcommandargs--done"},"client.command(args ","[, done]",")"),Object(r.b)("p",null,"Sends a command to the watchman service.  ",Object(r.b)("inlineCode",{parentName:"p"},"args")," is an array that specifies\nthe command name and any optional arguments.  The command is queued and\ndispatched asynchronously.  You may queue multiple commands to the service;\nthey will be dispatched in FIFO order once the client connection is established."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"done")," parameter is a callback that will be passed (error, result) when the\ncommand completes.  You may omit it if you are not interested in the result of\nthe command."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"client.command(['watch-project', process.cwd()], function(error, resp) {\n  if (error) {\n    console.log('watch failed: ', error);\n    return;\n  }\n  if ('warning' in resp) {\n    console.log('warning: ', resp.warning);\n  }\n  if ('relative_path' in resp) {\n    // We will need to remember and adjust for relative_path\n    console.log('watching project ', resp.watch, ' relative path to cwd is ',\n      resp.relative_path);\n  } else {\n    console.log('watching ', resp.watch);\n  }\n});\n")),Object(r.b)("p",null,"If a field named ",Object(r.b)("inlineCode",{parentName:"p"},"warning")," is present in ",Object(r.b)("inlineCode",{parentName:"p"},"resp"),", the watchman service is trying\nto communicate an issue that the user should see and address.  For example, if\nthe system watch resources need adjustment, watchman will provide information\nabout this and how to remediate the issue.  It is suggested that tools that\nbuild on top of this library bubble the warning message up to the user."),Object(r.b)("h3",{id:"clientend"},"client.end()"),Object(r.b)("p",null,"Terminates the connection to the watchman service.  Does not wait\nfor any queued commands to send."),Object(r.b)("h2",{id:"events"},"Events"),Object(r.b)("p",null,"The following events are emitted by the watchman client object:"),Object(r.b)("h3",{id:"event-connect"},"Event: 'connect'"),Object(r.b)("p",null,"Emitted when the client successfully connects to the watchman service"),Object(r.b)("h3",{id:"event-error"},"Event: 'error'"),Object(r.b)("p",null,"Emitted when the socket to the watchman service encounters an error."),Object(r.b)("p",null,"It may also be emitted prior to establishing a connection if we are unable\nto successfully execute the watchman CLI binary to determine how to talk\nto the server process."),Object(r.b)("p",null,"It is passed a variable that encapsulates the error."),Object(r.b)("h3",{id:"event-end"},"Event: 'end'"),Object(r.b)("p",null,"Emitted when the socket to the watchman service is closed"),Object(r.b)("h3",{id:"event-log"},"Event: 'log'"),Object(r.b)("p",null,"Emitted in response to a unilateral ",Object(r.b)("inlineCode",{parentName:"p"},"log")," PDU from the watchman service.\nTo enable these, you need to send a ",Object(r.b)("inlineCode",{parentName:"p"},"log-level")," command to the service:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"// This is very verbose, you probably don't want to do this\nclient.command(['log-level', 'debug']);\nclient.on('log', function(info) {\n  console.log(info);\n});\n")),Object(r.b)("h3",{id:"event-subscription"},"Event: 'subscription'"),Object(r.b)("p",null,"Emitted in response to a unilateral ",Object(r.b)("inlineCode",{parentName:"p"},"subscription")," PDU from the watchman\nservice.  To enable these, you need to send a ",Object(r.b)("inlineCode",{parentName:"p"},"subscribe")," command to the service:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"  // Subscribe to notifications about .js files\n  client.command(['subscribe', process.cwd(), 'mysubscription', {\n      expression: [\"match\", \"*.js\"]\n    }],\n    function(error, resp) {\n      if (error) {\n        // Probably an error in the subscription criteria\n        console.log('failed to subscribe: ', error);\n        return;\n      }\n      console.log('subscription ' + resp.subscribe + ' established');\n    }\n  );\n\n  // Subscription results are emitted via the subscription event.\n  // Note that watchman will deliver a list of all current files\n  // when you first subscribe, so you don't need to walk the tree\n  // for yourself on startup\n  client.on('subscription', function(resp) {\n    console.log(resp.root, resp.subscription, resp.files);\n  });\n")),Object(r.b)("p",null,"To cancel a subscription, use the ",Object(r.b)("inlineCode",{parentName:"p"},"unsubscribe")," command and pass in the name of\nthe subscription you want to cancel:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"  client.command(['unsubscribe', process.cwd(), 'mysubscription']);\n")),Object(r.b)("p",null,"Note that subscriptions names are scoped to your connection to the watchman\nservice; multiple different clients can use the same subscription name without\nfear of colliding."))}b.isMDXComponent=!0},205:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return u}));var i=t(0),a=t.n(i);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),b=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c({},n,{},e)),t},p=function(e){var n=b(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=Object(i.forwardRef)((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=b(t),d=i,u=p["".concat(o,".").concat(d)]||p[d]||h[d]||r;return t?a.a.createElement(u,c({ref:n},l,{components:t})):a.a.createElement(u,c({ref:n},l))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<r;l++)o[l]=t[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);