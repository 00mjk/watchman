(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{187:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(1),i=n(9),r=(n(0),n(204)),c={id:"watchman-make",title:"watchman-make"},o={id:"watchman-make",title:"watchman-make",description:"`watchman-make` is a convenience tool to help automatically invoke a build",source:"@site/docs/watchman-make.md",permalink:"/watchman/docs/watchman-make",editUrl:"https://github.com/facebook/watchman/edit/master/website/docs/watchman-make.md",sidebar:"sidebar",previous:{title:"Command Line",permalink:"/watchman/docs/cli-options"},next:{title:"watchman-wait",permalink:"/watchman/docs/watchman-wait"}},l=[{value:"Example",id:"example",children:[]},{value:"Targets",id:"targets",children:[]},{value:"Multiple Targets",id:"multiple-targets",children:[]},{value:"Run Scripts",id:"run-scripts",children:[]}],p={rightToc:l};function s(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"watchman-make")," is a convenience tool to help automatically invoke a build\ntool or script in response to files changing.  It is useful to automate building assets\nor running tests as you save files during development."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"watchman-make")," will establish a watch on the files you specify and remain\nrunning in the foreground, waiting for changes to occur.  When a change is\ntriggered, your build tool or script will be run in the foreground with its output being\npassed through to your terminal session (or wherever you may have redirected\nit)."),Object(r.b)("p",null,"Events are consolidated and settled before they are dispatched to your build\ntool so that it won't start executing until after the files have stopped\nchanging.  The ",Object(r.b)("inlineCode",{parentName:"p"},"--settle")," argument controls the settle duration."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"watchman-make")," requires ",Object(r.b)("inlineCode",{parentName:"p"},"pywatchman")," (and thus requires ",Object(r.b)("inlineCode",{parentName:"p"},"python"),") as well as\n",Object(r.b)("inlineCode",{parentName:"p"},"watchman"),"."),Object(r.b)("h3",{id:"example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ watchman-make -p '**/*.c' '**/*.h' 'Makefile*' -t all -p 'tests/**/*.py' 'tests/**/*.c' -t integration\n# Relative to /Users/wez/fb/watchman\n# Changes to files matching **/*.c **/*.h Makefile* will execute `make all`\n# Changes to files matching tests/**/*.py tests/**/*.c will execute `make integration`\n# waiting for changes\n")),Object(r.b)("h3",{id:"targets"},"Targets"),Object(r.b)("p",null,"You can tell ",Object(r.b)("inlineCode",{parentName:"p"},"watchman-make")," about one or more build targets\nand their dependencies, and it will then trigger the build for those targets as\nchanges are detected."),Object(r.b)("p",null,"The example above defines two targets using the ",Object(r.b)("inlineCode",{parentName:"p"},"-t")," argument; ",Object(r.b)("inlineCode",{parentName:"p"},"all")," and\n",Object(r.b)("inlineCode",{parentName:"p"},"integration"),".  These correspond to targets with the same names in the watchman\n",Object(r.b)("inlineCode",{parentName:"p"},"Makefile"),".  Each target will pick up the list of patterns defined by the ",Object(r.b)("inlineCode",{parentName:"p"},"-p"),"\nargument that precedes it."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ watchman-make -p '**/*.c' '**/*.h' -t all\n")),Object(r.b)("p",null,"The above defines a target named ",Object(r.b)("inlineCode",{parentName:"p"},"all")," that will be triggered whenever any\ncombination of files are changed that have filenames that match either of the\npatterns ",Object(r.b)("inlineCode",{parentName:"p"},"*.c")," or ",Object(r.b)("inlineCode",{parentName:"p"},"*.h")," at any level in the directory tree (that's what the\n",Object(r.b)("inlineCode",{parentName:"p"},"**")," portion means).   When it triggers, ",Object(r.b)("inlineCode",{parentName:"p"},"watchman-make")," will execute ",Object(r.b)("inlineCode",{parentName:"p"},"make\nall"),"."),Object(r.b)("p",null,"If you don't use ",Object(r.b)("inlineCode",{parentName:"p"},"make"),", you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"--make")," option to tell ",Object(r.b)("inlineCode",{parentName:"p"},"watchman-make"),"\nto use your builder of choice.  When a target is triggered, ",Object(r.b)("inlineCode",{parentName:"p"},"watchman-make")," will\nconcatenate the value of ",Object(r.b)("inlineCode",{parentName:"p"},"--make")," with the name of the target and execute that\ncommand using the shell."),Object(r.b)("p",null,"The target name has no special meaning to ",Object(r.b)("inlineCode",{parentName:"p"},"watchman-make"),", it is used only to\nconstruct the command to invoke.  There is no special logic or support that is\nspecific to Makefiles or make."),Object(r.b)("h3",{id:"multiple-targets"},"Multiple Targets"),Object(r.b)("p",null,"There are two different ways to specify multiple targets.  The first is shown\nin the main example at the top of this page and is repeated here:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ watchman-make -p '*.c' '*.h' 'Makefile*' -t all -p 'tests/**/*.py' 'tests/**/*.c' -t integration\n")),Object(r.b)("p",null,"This defines two independent targets, ",Object(r.b)("inlineCode",{parentName:"p"},"all")," and ",Object(r.b)("inlineCode",{parentName:"p"},"integration")," that each have a\nlist of patterns defined as their triggers.  Each time you specify a target\nusing the ",Object(r.b)("inlineCode",{parentName:"p"},"-t")," option, the value of the ",Object(r.b)("inlineCode",{parentName:"p"},"-p")," option is cleared."),Object(r.b)("p",null,"The above will cause ",Object(r.b)("inlineCode",{parentName:"p"},"make all")," to be run if you change a file that matches\n",Object(r.b)("inlineCode",{parentName:"p"},".*c")," (at the top level of the tree), and will cause ",Object(r.b)("inlineCode",{parentName:"p"},"make integration")," to run\nif you change a source file under the tests directory."),Object(r.b)("p",null,"An alternative is to list multiple target names with your ",Object(r.b)("inlineCode",{parentName:"p"},"-t")," option:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ watchman-make -p '*.c' '*.h' 'Makefile*' 'tests/**/*.py' 'tests/**/*.c' -t all integration\n")),Object(r.b)("p",null,"this will execute ",Object(r.b)("inlineCode",{parentName:"p"},"make all integration")," if you change any top level ",Object(r.b)("inlineCode",{parentName:"p"},"*.c")," file\n",Object(r.b)("em",{parentName:"p"},"or")," test source file."),Object(r.b)("h3",{id:"run-scripts"},"Run Scripts"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Since 4.8.")),Object(r.b)("p",null,"As an alternative to targets, you can provide the path to a script which ",Object(r.b)("inlineCode",{parentName:"p"},"watchman-make"),"\nwill execute when changes are detected."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ watchman-make -p '**/*.c' '**/*.h' --run my_script.sh\n")),Object(r.b)("p",null,"The above will run the provided script whenever any\ncombination of files are changed that have filenames that match either of the\npatterns ",Object(r.b)("inlineCode",{parentName:"p"},"*.c")," or ",Object(r.b)("inlineCode",{parentName:"p"},"*.h")," at any level in the directory tree. When it triggers,\n",Object(r.b)("inlineCode",{parentName:"p"},"watchman-make")," will execute ",Object(r.b)("inlineCode",{parentName:"p"},"my_script.sh"),"."),Object(r.b)("p",null,"You must run ",Object(r.b)("inlineCode",{parentName:"p"},"watchman-make")," with either ",Object(r.b)("inlineCode",{parentName:"p"},"--target")," or ",Object(r.b)("inlineCode",{parentName:"p"},"--run"),", but they cannot\nbe run together"))}s.isMDXComponent=!0},204:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=i.a.createContext({}),s=function(e){var t=i.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o({},t,{},e)),n},b=function(e){var t=s(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},h=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=s(n),h=a,u=b["".concat(c,".").concat(h)]||b[h]||m[h]||r;return n?i.a.createElement(u,o({ref:t},p,{components:n})):i.a.createElement(u,o({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,c=new Array(r);c[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var p=2;p<r;p++)c[p]=n[p];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);