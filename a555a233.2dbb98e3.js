(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{170:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(1),i=n(9),r=(n(0),n(205)),o={id:"release-notes",title:"Release Notes"},l={id:"release-notes",title:"Release Notes",description:"We focus on the highlights only in these release notes.  For a full history",source:"@site/docs/release-notes.md",permalink:"/watchman/docs/release-notes",editUrl:"https://github.com/facebook/watchman/edit/master/website/docs/release-notes.md",sidebar:"sidebar",previous:{title:"Installation",permalink:"/watchman/docs/install"},next:{title:"Command Line",permalink:"/watchman/docs/cli-options"}},c=[{value:"Watchman 5.0.0 (not yet released)",id:"watchman-500-not-yet-released",children:[]},{value:"Watchman 4.9.0 (2017-08-24)",id:"watchman-490-2017-08-24",children:[]},{value:"Watchman 4.8.0 (never formally released)",id:"watchman-480-never-formally-released",children:[]},{value:"Watchman 4.7.0 (2016-09-10)",id:"watchman-470-2016-09-10",children:[]},{value:"Watchman 4.6.0 (2016-07-09)",id:"watchman-460-2016-07-09",children:[]},{value:"pywatchman 1.4.0 (????-??-??)",id:"pywatchman-140---",children:[]},{value:"Watchman 4.5.0 (2016-02-18)",id:"watchman-450-2016-02-18",children:[]},{value:"Watchman 4.4.0 (2016-02-02)",id:"watchman-440-2016-02-02",children:[]},{value:"Watchman 4.3.0 (2015-12-14)",id:"watchman-430-2015-12-14",children:[]},{value:"Watchman 4.2.0 (2015-12-08)",id:"watchman-420-2015-12-08",children:[]},{value:"pywatchman 1.3.0 (2015-10-22)",id:"pywatchman-130-2015-10-22",children:[]},{value:"Watchman 4.1.0 (2015-10-20)",id:"watchman-410-2015-10-20",children:[]},{value:"Watchman 4.0.0 (2015-10-19)",id:"watchman-400-2015-10-19",children:[]},{value:"Watchman 3.9.0 (2015-10-12)",id:"watchman-390-2015-10-12",children:[]},{value:"Watchman 3.8.0 (2015-09-14)",id:"watchman-380-2015-09-14",children:[]},{value:"pywatchman 1.2.0 (2015-08-15)",id:"pywatchman-120-2015-08-15",children:[]},{value:"fb-watchman 1.3.0 for node (2015-08-15)",id:"fb-watchman-130-for-node-2015-08-15",children:[]},{value:"pywatchman 1.0.0 (2015-08-06)",id:"pywatchman-100-2015-08-06",children:[]},{value:"Watchman 3.7.0 (2015-08-05)",id:"watchman-370-2015-08-05",children:[]},{value:"fb-watchman 1.2.0 for node (2015-07-11)",id:"fb-watchman-120-for-node-2015-07-11",children:[]},{value:"Watchman 3.5.0 (2015-06-29)",id:"watchman-350-2015-06-29",children:[]},{value:"Watchman 3.4.0 (2015-06-29)",id:"watchman-340-2015-06-29",children:[]},{value:"fb-watchman 1.1.0 for node (2015-06-25)",id:"fb-watchman-110-for-node-2015-06-25",children:[]},{value:"fb-watchman 1.0.0 for node (2015-06-23)",id:"fb-watchman-100-for-node-2015-06-23",children:[]},{value:"Watchman 3.3.0 (2015-06-22)",id:"watchman-330-2015-06-22",children:[]}],s={rightToc:c};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"We focus on the highlights only in these release notes.  For a full history\nthat includes all of the gory details, please see ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/facebook/watchman/commits/master"}),"the commit history on\nGitHub"),"."),Object(r.b)("h3",{id:"watchman-500-not-yet-released"},"Watchman 5.0.0 (not yet released)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Added script ",Object(r.b)("inlineCode",{parentName:"li"},"watchman-replicate-subscription"),". It can replicate an\nexisting watchman subscription. Integrators can use this script to validate\nwatchman notifications their client is receiving."),Object(r.b)("li",{parentName:"ul"},"Added support for suffix sets in suffix expressions.  You now can specify\nmultiple suffixes to match against by setting the second argument to a list\nof suffixes. See ",Object(r.b)("inlineCode",{parentName:"li"},"suffix-set")," documentation for\n",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"suffix#suffix-set"}),"more details")),Object(r.b)("li",{parentName:"ul"},"pywatchman: introduced new pywatchman_aio client for python")),Object(r.b)("h3",{id:"watchman-490-2017-08-24"},"Watchman 4.9.0 (2017-08-24)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"New field: ",Object(r.b)("inlineCode",{parentName:"li"},"content.sha1hex"),".  This field expands to the SHA1 hash of\nthe file contents, expressed in hex digits (40 character hex string).\nWatchman maintains a cache of the content hashes and can compute the\nhash on demand and also heuristically as files are changed.  This is\nuseful for tooling that wants to perform more intelligent cache invalidation\nor build artifact fetching from content addressed storage."),Object(r.b)("li",{parentName:"ul"},"Experimental feature: Source Control Aware query mode.  Currently supports\nonly Mercurial (patches to add Git support are welcomed!).  SCM aware query\nmode helps to keep response sizes closer to ",Object(r.b)("inlineCode",{parentName:"li"},"O(what-you-changed)")," than\nto ",Object(r.b)("inlineCode",{parentName:"li"},"O(all-repo-changes)")," when rebasing your code.  Using this feature\neffectively may require some additional infrastructure to compute and\nassociate data with revisions from your repo."),Object(r.b)("li",{parentName:"ul"},"Fixed an issue that resulted in the perf logging thread deadlocking when\n",Object(r.b)("inlineCode",{parentName:"li"},"perf_logger_command")," is enabled in the global configuration"),Object(r.b)("li",{parentName:"ul"},"Fixed an issue where queries larger than 1MB would likely result in\na PDU error response."),Object(r.b)("li",{parentName:"ul"},"Reduced lock contention for subscriptions that do no use the advanced\nsettling (",Object(r.b)("inlineCode",{parentName:"li"},"drop"),", ",Object(r.b)("inlineCode",{parentName:"li"},"defer"),") options."),Object(r.b)("li",{parentName:"ul"},"Fixed ",Object(r.b)("inlineCode",{parentName:"li"},"since")," generator behavior when using unix timestamps rather than\nthe preferred clock string syntax"),Object(r.b)("li",{parentName:"ul"},'Improved the reporting of "new" files in watchman results'),Object(r.b)("li",{parentName:"ul"},"Improved performance of handling changes on case insensitive filesystems"),Object(r.b)("li",{parentName:"ul"},"Windows: promoted from alpha to beta status!"),Object(r.b)("li",{parentName:"ul"},"Windows: fixed some performance and reliability issues"),Object(r.b)("li",{parentName:"ul"},"Windows: now operates correctly on Windows 7"),Object(r.b)("li",{parentName:"ul"},"Windows: can now see and report symlinks and junction points"),Object(r.b)("li",{parentName:"ul"},"Windows: fixed potential deadlock in trigger deletion"),Object(r.b)("li",{parentName:"ul"},"Windows: fixed stack trace rendering on win32"),Object(r.b)("li",{parentName:"ul"},"Windows: improved IO scheduling around deletes on win32"),Object(r.b)("li",{parentName:"ul"},"Windows: improved handling of case insensitive win32 driver letters"),Object(r.b)("li",{parentName:"ul"},"pywatchman: the python wheel format is used for publishing watchman pypi package"),Object(r.b)("li",{parentName:"ul"},"pywatchman: now watchman path is configurable in python client"),Object(r.b)("li",{parentName:"ul"},"pywatchman: now python client can be used as a context manager"),Object(r.b)("li",{parentName:"ul"},"Solaris: support for Solaris has been removed. If you'd like to commit to\ntesting and maintaining Solaris support, we'd love to hear from you!")),Object(r.b)("h3",{id:"watchman-480-never-formally-released"},"Watchman 4.8.0 (never formally released)"),Object(r.b)("p",null,"Whoops, we never got around to tagging this beyond a release candidate tag!"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"New command ",Object(r.b)("inlineCode",{parentName:"li"},"flush-subscriptions")," to synchronize subscriptions associated\nwith the current session."),Object(r.b)("li",{parentName:"ul"},"On Windows, return ",Object(r.b)("inlineCode",{parentName:"li"},"/")," as the directory separator.  Previously we used ",Object(r.b)("inlineCode",{parentName:"li"},"\\"),".\nThis change should be pretty neutral for clients, and makes it easier to work\nwith both the internals and the integration test infrastructure."),Object(r.b)("li",{parentName:"ul"},"Enforce socket Unix groups more strongly \u2014 Watchman will now refuse to start\nif it couldn't gain the right group memberships, as can happen for sites that\nare experiencing intermittent LDAP connectivity problems."),Object(r.b)("li",{parentName:"ul"},"pywatchman now officially supports Python 3. pywatchman will return Unicode\nstrings (possibly with surrogate escapes) by default, but can optionally return\nbytestrings. Note that on Python 3, pywatchman requires Watchman 4.8 and above.\nThe Python 2 interface and requirements remain unchanged."),Object(r.b)("li",{parentName:"ul"},"Prior to 4.8, methods on the Java WatchmanClient that returned\nListenableFutures would swallow exceptions and hang in an unfinished state\nunder situations like socket closure or thread death.  This has been fixed, and\nnow ListenableFutures propagate exception conditions immediately.  (Note that\nthis is typically unrecoverable, and users should create a new WatchmanClient\nto re-establish communication with Watchman.)  See #412."),Object(r.b)("li",{parentName:"ul"},"The minimum Java version for the Watchman Java client has always been 1.7,\nbut it was incorrectly described to be 1.6.  The Java client's build file has\nbeen fixed accordingly."),Object(r.b)("li",{parentName:"ul"},"Watchman was converted from C to C++.  The conversion exposed several\nconcurrency bugs, all of which have now been fixed."),Object(r.b)("li",{parentName:"ul"},"Subscription queries are now executed in the context of the client thread,\nwhich means that subscriptions are dispatched in parallel.  Previously,\nsubscriptions would be serially dispatched and block the disk IO thread."),Object(r.b)("li",{parentName:"ul"},"Triggers are now dispatched in parallel and waits are managed in their own\nthreads (one thread per trigger).  This improves concurrency and resolves a\ncouple of waitpid related issues where watchman may not reap spawned children\nin a timely fashion, or may spin on CPU until another child is spawned."),Object(r.b)("li",{parentName:"ul"},"Fixed an object lifecycle management issue that could cause a crash when\naging out old/transient files."),Object(r.b)("li",{parentName:"ul"},"Implement an upgraded wire protocol, BSERv2, on the server and in pywatchman.\nBSERv2 can carry information about string encoding over the wire. This lets\npywatchman convert to Unicode strings on Python 3. Clients and servers know how\nto  transparently fall back to BSERv1."),Object(r.b)("li",{parentName:"ul"},"OS X: we no longer use socket activation when registering with launchd.\nThis was the source of some upgrade problems for mac Homebrew users.")),Object(r.b)("h3",{id:"watchman-470-2016-09-10"},"Watchman 4.7.0 (2016-09-10)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Reduced memory usage by 40%"),Object(r.b)("li",{parentName:"ul"},"Queries can now run with a shared lock.  It is recommended that clients\nmove away from the ",Object(r.b)("inlineCode",{parentName:"li"},"n:FOO")," style server side named cursor clockspecs to\ntake full advantage of this."),Object(r.b)("li",{parentName:"ul"},"Added new ",Object(r.b)("inlineCode",{parentName:"li"},"glob")," generator as a walking strategy for queries.  This\nallows watchman to evaluate globs in the most efficient manner.  Our\nfriends in the Buck project have already integrated this into their\n",Object(r.b)("inlineCode",{parentName:"li"},"BUCK")," file parsing to evaluate globs without touching the filesystem!"),Object(r.b)("li",{parentName:"ul"},"Added ",Object(r.b)("inlineCode",{parentName:"li"},'"case_sensitive": true')," option to queries to force matches to\nhappen in a case sensitive manner, even if the watched root is on\na case insensitive filesystem.  This is used to accelerate certain\ntypes of internal traversal: if we know that a path is case sensitive\nwe can perform an ",Object(r.b)("inlineCode",{parentName:"li"},"O(1)")," lookup where we would otherwise have to perform\nan ",Object(r.b)("inlineCode",{parentName:"li"},"O(number-of-directory-entries)")," scan and compare."),Object(r.b)("li",{parentName:"ul"},"Fixed a race condition during subscription initiation that could emit\nincorrect clock values."),Object(r.b)("li",{parentName:"ul"},"Fixed spurious over-notification for parent directories of changed files\non Mac."),Object(r.b)("li",{parentName:"ul"},"Fixed some reliability issues on Windows")),Object(r.b)("h3",{id:"watchman-460-2016-07-09"},"Watchman 4.6.0 (2016-07-09)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Improved I/O scheduling when processing recursive deletes and deep directory\nrename operations."),Object(r.b)("li",{parentName:"ul"},"Improved performance of the ",Object(r.b)("inlineCode",{parentName:"li"},"ignore_dirs")," configuration option on OS X and\nWindows systems.  We take advantage of an undocumented (but supported!)\nAPI to further accelerate this for the first 8 entries in the ",Object(r.b)("inlineCode",{parentName:"li"},"ignore_dirs"),"\non OS X.  Users that depend on this configuration to avoid recrawls will\nwant to review and prioritize their most active build dirs to the front\nof the ",Object(r.b)("inlineCode",{parentName:"li"},"ignore_dirs")," specified in their ",Object(r.b)("inlineCode",{parentName:"li"},".watchmanconfig")," file."),Object(r.b)("li",{parentName:"ul"},"Added an optional recrawl recovery strategy for OS X that will attempt to\nresync from the fseventsd journal rather than performing a full filesystem\nwalk.  This is currently disabled by default but will likely be enabled\nby default in the next Watchman release.  You can enable this by setting\n",Object(r.b)("inlineCode",{parentName:"li"},"fsevents_try_resync: true")," in either ",Object(r.b)("inlineCode",{parentName:"li"},"/etc/watchman.json")," or your\n",Object(r.b)("inlineCode",{parentName:"li"},".watchmanconfig"),".  This should reduce the frequency of recrawl warnings\nfor some users/workloads, and also improves I/O for users with extremely\nlarge trees."),Object(r.b)("li",{parentName:"ul"},"Fixed accidental exponential time complexity issue with recursive deletes\nand deep directory rename operations on case-insensitive filesystems (such as\nOS X).  This manifested as high CPU utilization for extended periods of time."),Object(r.b)("li",{parentName:"ul"},"Added support for allowing non-owner access to a Watchman instance.  Only\nthe owner is authorized to create or delete watches.  Non-owners can view\ninformation about existing watches.  Access control is based on unix domain\nsocket permissions.  The new but not yet documented configuration options\n",Object(r.b)("inlineCode",{parentName:"li"},"sock_group")," and ",Object(r.b)("inlineCode",{parentName:"li"},"sock_access")," can be used to control this new behavior."),Object(r.b)("li",{parentName:"ul"},"Added support for inetd-style socket activation of the watchman service.\n",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/facebook/watchman/commit/2985377eaf8c8538b28fae9add061b67991a87c2"}),"this commit includes a sample configuration for systemd"),"."),Object(r.b)("li",{parentName:"ul"},"Added the ",Object(r.b)("inlineCode",{parentName:"li"},"symlink_target")," field to the stored metadata for files.  This\nholds the text of the symbolic link for symlinks.  You can test whether it\nis supported by a watchman server using the capability name\n",Object(r.b)("inlineCode",{parentName:"li"},"field-symlink_target"),"."),Object(r.b)("li",{parentName:"ul"},"Fixed an issue where watchman may not reap child processes spawned by\ntriggers."),Object(r.b)("li",{parentName:"ul"},"Fixed an issue where watchman may block forever during shutdown if there\nare other connected clients."),Object(r.b)("li",{parentName:"ul"},"Added ",Object(r.b)("inlineCode",{parentName:"li"},"hint_num_dirs")," configuration option.")),Object(r.b)("h3",{id:"pywatchman-140---"},"pywatchman 1.4.0 (????-??-??)"),Object(r.b)("p",null,"(These changes have not yet been released to pypi)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Added immutable version of data results to bser.  This is cheaper to build\nfrom a serialized bser representation than the mutable version and is\nbetter suited to large result sets received from watchman."),Object(r.b)("li",{parentName:"ul"},"Fixed a number of misc. portability issues"),Object(r.b)("li",{parentName:"ul"},"Added Python 3.x support")),Object(r.b)("h3",{id:"watchman-450-2016-02-18"},"Watchman 4.5.0 (2016-02-18)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Fixed an inotify race condition for non-atomic directory replacements\nthat was introduced in Watchman 4.4.")),Object(r.b)("h3",{id:"watchman-440-2016-02-02"},"Watchman 4.4.0 (2016-02-02)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Added state-enter and state-leave commands can allow subscribers to more\nintelligently settle/coalesce events around hg update or builds."),Object(r.b)("li",{parentName:"ul"},"Fixed an issue where subscriptions could double-notify for the same events."),Object(r.b)("li",{parentName:"ul"},"Fixed an issue where subscriptions that never match any files add\nO(all-observed-files) CPU cost to every subscription dispatch")),Object(r.b)("h3",{id:"watchman-430-2015-12-14"},"Watchman 4.3.0 (2015-12-14)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Improved handling of case insensitive renames; halved the memory usage\nand doubled crawl speed on OS X.")),Object(r.b)("h3",{id:"watchman-420-2015-12-08"},"Watchman 4.2.0 (2015-12-08)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Increased strictness of checks for symlinks; rather than just checking\nwhether the leaf of a directory tree is a symlink, we now check each\ncomponent down from the root of the watch.  This improves detection\nand processing for directory-to-symlink (and vice versa) transitions."),Object(r.b)("li",{parentName:"ul"},"Increased priority of the watchman process on OS X.")),Object(r.b)("h3",{id:"pywatchman-130-2015-10-22"},"pywatchman 1.3.0 (2015-10-22)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Added ",Object(r.b)("inlineCode",{parentName:"li"},"watchman-make")," and ",Object(r.b)("inlineCode",{parentName:"li"},"watchman-wait")," commands"),Object(r.b)("li",{parentName:"ul"},"Added pure python implementation of BSER")),Object(r.b)("h3",{id:"watchman-410-2015-10-20"},"Watchman 4.1.0 (2015-10-20)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Fixed an issue where symlink size was always reported as 0 on OS X\nusing the new bulkstat functionality")),Object(r.b)("h3",{id:"watchman-400-2015-10-19"},"Watchman 4.0.0 (2015-10-19)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Fixed an issue where a directory that was replaced by a symlink would\ncause a symlink traversal instead of correctly updating the type of the\nnode and marking the children removed."),Object(r.b)("li",{parentName:"ul"},"Fixed a debugging log line that was emitted at the wrong log level on\nevery directory traversal.")),Object(r.b)("h3",{id:"watchman-390-2015-10-12"},"Watchman 3.9.0 (2015-10-12)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Fixed an issue where dir renames on OS X could cause us to lose track of\nthe files inside the renamed dir"),Object(r.b)("li",{parentName:"ul"},"Fixed an issue where dir deletes and replacements on Linux could cause us\nto lose track of the files inside the replaced dir (similar to the OS X issue\nabove in manifestation, but a different root cause)."),Object(r.b)("li",{parentName:"ul"},"Improved (re)crawl speed for dirs with more than a couple of entries on average\n(improvement can be up to 5x for dirs with up to 64 entries on average).\nYou may now tune the ",Object(r.b)("inlineCode",{parentName:"li"},"hint_num_files_per_dir")," setting in your\n",Object(r.b)("inlineCode",{parentName:"li"},".watchmanconfig")," to better match your tree.  ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"config#hint_num_files_per_dir"}),"More details")),Object(r.b)("li",{parentName:"ul"},"Improved (re)crawl speed on OS X 10.10 and later by using ",Object(r.b)("inlineCode",{parentName:"li"},"getattrlistbulk"),".\nThis allows us to improve the data:syscall ratio during crawling and can\nimprove throughput by up to 40% for larger trees."),Object(r.b)("li",{parentName:"ul"},"Add optional ",Object(r.b)("inlineCode",{parentName:"li"},"sync_timeout")," to the ",Object(r.b)("inlineCode",{parentName:"li"},"clock")," command"),Object(r.b)("li",{parentName:"ul"},"Avoid accidentally passing descriptors other than the stdio streams\nwhen we spawn the watchman service."),Object(r.b)("li",{parentName:"ul"},"Fixed a race condition where we could start two sets of watcher threads\nfor the same dir if two clients issue a ",Object(r.b)("inlineCode",{parentName:"li"},"watch")," or ",Object(r.b)("inlineCode",{parentName:"li"},"watch-project")," at\nthe same time"),Object(r.b)("li",{parentName:"ul"},"Added a helpful error for a tmux + launchd issue on OS X")),Object(r.b)("h3",{id:"watchman-380-2015-09-14"},"Watchman 3.8.0 (2015-09-14)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Improved latency of processing kernel notifications. It should now be far\nless likely to run into an notification queue overflow."),Object(r.b)("li",{parentName:"ul"},"Improved idle behavior. There were a couple of places where watchman would\nwake up more often than was strictly needed and these have now been fixed.\nThis is mostly of interest to laptop users on battery power."),Object(r.b)("li",{parentName:"ul"},"Improved inotify move tracking.  Some move operations could cause watchman\nto become confused and trigger a recrawl.  This has now been resolved."),Object(r.b)("li",{parentName:"ul"},"Hardened statedir and permissions. There was a possibility of a symlink\nattack and this has now been mitigated by re-structuring the statedir layout."),Object(r.b)("li",{parentName:"ul"},"Fixed a possible deadlock in the idle watch reaper"),Object(r.b)("li",{parentName:"ul"},"Fixed an issue where the watchman -p log-level debug could drop log\nnotifications in the CLI"),Object(r.b)("li",{parentName:"ul"},"Disabled the IO-throttling-during-crawl that we added in 3.7. It proved to\nbe more harmful than beneficial."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"-j")," CLI option now accepts either JSON or BSER encoded command on stdin"),Object(r.b)("li",{parentName:"ul"},"Added ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"capabilities"}),"capabilities")," to the server,\nand added the ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"version#capabilityCheck"}),"capabilityCheck"),"\nmethod to the python and node clients.")),Object(r.b)("h3",{id:"pywatchman-120-2015-08-15"},"pywatchman 1.2.0 (2015-08-15)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Added the ",Object(r.b)("inlineCode",{parentName:"li"},"capabilityCheck")," method"),Object(r.b)("li",{parentName:"ul"},"Added ",Object(r.b)("inlineCode",{parentName:"li"},"SocketTimeout")," exception to distinguish timeouts from protocol level\nexceptions")),Object(r.b)("h3",{id:"fb-watchman-130-for-node-2015-08-15"},"fb-watchman 1.3.0 for node (2015-08-15)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Added the ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"nodejs#checking-for-watchman-availability"}),"capabilityCheck")," method.")),Object(r.b)("h3",{id:"pywatchman-100-2015-08-06"},"pywatchman 1.0.0 (2015-08-06)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"First official pypi release, thanks to ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/kwlzn"}),"@kwlzn"),"\nfor setting up the release machinery for this.")),Object(r.b)("h3",{id:"watchman-370-2015-08-05"},"Watchman 3.7.0 (2015-08-05)"),Object(r.b)("p",null,"(Watchman 3.6.0 wasn't formally released)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Fixed bug where ",Object(r.b)("inlineCode",{parentName:"li"},"query match")," on ",Object(r.b)("inlineCode",{parentName:"li"},"foo*.java")," with ",Object(r.b)("inlineCode",{parentName:"li"},"wholename")," scope\nwould incorrectly match ",Object(r.b)("inlineCode",{parentName:"li"},"foo/bar/baz.java"),"."),Object(r.b)("li",{parentName:"ul"},"Added ",Object(r.b)("inlineCode",{parentName:"li"},"src/**/*.java")," recursive glob pattern support to ",Object(r.b)("inlineCode",{parentName:"li"},"query match"),"."),Object(r.b)("li",{parentName:"ul"},"Added options dictionary to ",Object(r.b)("inlineCode",{parentName:"li"},"query"),"'s ",Object(r.b)("inlineCode",{parentName:"li"},"match")," operator."),Object(r.b)("li",{parentName:"ul"},"Added ",Object(r.b)("inlineCode",{parentName:"li"},"includedotfiles")," option to ",Object(r.b)("inlineCode",{parentName:"li"},"query match")," to include files\nwhose names start with ",Object(r.b)("inlineCode",{parentName:"li"},"."),"."),Object(r.b)("li",{parentName:"ul"},"Added ",Object(r.b)("inlineCode",{parentName:"li"},"noescape")," option to ",Object(r.b)("inlineCode",{parentName:"li"},"query match")," to make ",Object(r.b)("inlineCode",{parentName:"li"},"\\")," match literal ",Object(r.b)("inlineCode",{parentName:"li"},"\\"),"."),Object(r.b)("li",{parentName:"ul"},"We'll now automatically age out and stop watches. See ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"config#idle_reap_age_seconds"}),"idle_reap_age_seconds")," for more information."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"watch-project")," will now try harder to re-use an existing watch and avoid\ncreating an overlapping watch."),Object(r.b)("li",{parentName:"ul"},"Reduce I/O priority during crawling on systems that support this"),Object(r.b)("li",{parentName:"ul"},"Fixed issue with the ",Object(r.b)("inlineCode",{parentName:"li"},"long long")," data type in the python BSER module")),Object(r.b)("h3",{id:"fb-watchman-120-for-node-2015-07-11"},"fb-watchman 1.2.0 for node (2015-07-11)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Updated the node client to more gracefully handle ",Object(r.b)("inlineCode",{parentName:"li"},"undefined")," values in\nobjects when serializing them; we now omit keys whose values are ",Object(r.b)("inlineCode",{parentName:"li"},"undefined"),"\nrather than throw an exception.")),Object(r.b)("h3",{id:"watchman-350-2015-06-29"},"Watchman 3.5.0 (2015-06-29)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Fix the version number reported by watchman.")),Object(r.b)("h3",{id:"watchman-340-2015-06-29"},"Watchman 3.4.0 (2015-06-29)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"trigger")," now supports an optional ",Object(r.b)("inlineCode",{parentName:"li"},"relative_root")," argument. The trigger is\nevaluated with respect to this subdirectory. See\n",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"trigger#relative-roots"}),"trigger")," for more.")),Object(r.b)("h3",{id:"fb-watchman-110-for-node-2015-06-25"},"fb-watchman 1.1.0 for node (2015-06-25)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Updated the node client to handle 64-bit integer values using the\n",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.npmjs.com/package/node-int64"}),"node-int64"),".  These are most\nlikely to show up if your query fields include ",Object(r.b)("inlineCode",{parentName:"li"},"size")," and you have files\nlarger than 2GB in your watched root.")),Object(r.b)("h3",{id:"fb-watchman-100-for-node-2015-06-23"},"fb-watchman 1.0.0 for node (2015-06-23)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Updated the node client to support ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"bser"}),"BSER"),"\nencoding, fixing a quadratic performance issue in the JSON stream\ndecoder that was used previously.")),Object(r.b)("h3",{id:"watchman-330-2015-06-22"},"Watchman 3.3.0 (2015-06-22)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"query")," and ",Object(r.b)("inlineCode",{parentName:"li"},"subscribe")," now support an optional ",Object(r.b)("inlineCode",{parentName:"li"},"relative_root"),"\nargument. Inputs and outputs are evaluated with respect to this\nsubdirectory. See\n",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"file-query#relative-roots"}),"File Queries")," for more.")))}d.isMDXComponent=!0},205:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),d=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},b=function(e){var t=d(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=d(n),m=a,u=b["".concat(o,".").concat(m)]||b[m]||h[m]||r;return n?i.a.createElement(u,l({ref:t},s,{components:n})):i.a.createElement(u,l({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);