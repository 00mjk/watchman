(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{159:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(1),r=n(9),i=(n(0),n(204)),o={id:"file-query",title:"File Queries"},l={id:"file-query",title:"File Queries",description:"Watchman file queries consist of 1 or more *generators* that feed files through",source:"@site/docs/file-query.md",permalink:"/watchman/docs/file-query",editUrl:"https://github.com/facebook/watchman/edit/master/website/docs/file-query.md",sidebar:"sidebar",previous:{title:"Clockspec",permalink:"/watchman/docs/clockspec"},next:{title:"Simple Pattern Syntax",permalink:"/watchman/docs/simple-query"}},s=[{value:"Generators",id:"generators",children:[]},{value:"De-duplicating results",id:"de-duplicating-results",children:[]},{value:"Since Generator",id:"since-generator",children:[]},{value:"Suffix Generator",id:"suffix-generator",children:[]},{value:"Glob Generator",id:"glob-generator",children:[]},{value:"Path Generator",id:"path-generator",children:[]},{value:"All Generator",id:"all-generator",children:[]},{value:"Expressions",id:"expressions",children:[]},{value:"Relative roots",id:"relative-roots",children:[]}],c={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Watchman file queries consist of 1 or more ",Object(i.b)("em",{parentName:"p"},"generators")," that feed files through\nthe ",Object(i.b)("em",{parentName:"p"},"expression evaluator"),"."),Object(i.b)("h3",{id:"generators"},"Generators"),Object(i.b)("p",null,"Generators are analogous to the list of ",Object(i.b)("em",{parentName:"p"},"paths")," that you specify when using the\n",Object(i.b)("inlineCode",{parentName:"p"},"find(1)")," utility, but are implemented in watchman with a bit of a twist\nbecause watchman doesn't need to crawl the filesystem in realtime and instead\nmaintains a couple of indexes over the tree."),Object(i.b)("p",null,"A query may specify any number of generators; each generator will emit its list\nof files and this may mean that you see the same file output more than once if\nyou specified the use of multiple generators that all produce the same file."),Object(i.b)("p",null,"Watchman provides 5 generators:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"since"),": produces a list of files that were modified since a specific\nclockspec."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"suffix"),": produces a list of files that have a particular suffix."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"glob"),": efficiently pattern match a list of files based on their names."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"path"),": produces a list of files based on their path and depth."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"all"),": produces a list of all known files")),Object(i.b)("h3",{id:"de-duplicating-results"},"De-duplicating results"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Since 4.7.")),Object(i.b)("p",null,"If your query uses multiple generators, or configures the ",Object(i.b)("inlineCode",{parentName:"p"},"path")," generator with\npaths that yield multiple results, the default behavior (for backwards\ncompatibility reasons) is to emit those duplicate results in the query output."),Object(i.b)("p",null,"You may ask Watchman to de-duplicate results for you by enabling the\n",Object(i.b)("inlineCode",{parentName:"p"},"dedup_results")," boolean in your query:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'$ watchman -j <<-EOT\n["query", "/path/to/root", {\n  "path": ["bar", "bar"],\n  "dedup_results": true\n}]\nEOT\n')),Object(i.b)("p",null,"You may test for this feature using an extended version command and requesting\nthe capability name ",Object(i.b)("inlineCode",{parentName:"p"},"dedup_results"),"."),Object(i.b)("h3",{id:"since-generator"},"Since Generator"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"since")," generator produces a list of files that were modified since a\nspecific ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"clockspec"}),"clockspec"),"."),Object(i.b)("p",null,"The following query will consider the set of files changed since the last\nquery using the named cursor ",Object(i.b)("inlineCode",{parentName:"p"},"mycursor")," and then pass them to the expression\nevaluator to be filtered to just those that are files:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ watchman -j <<-EOT\n["query", "/path/to/root", {\n  "since": "n:mycursor",\n  "expression": ["type", "f"]\n}]\nEOT\n')),Object(i.b)("p",null,"If the ",Object(i.b)("inlineCode",{parentName:"p"},"since")," parameter value is blank, was produced by a different watchman\nprocess (in other words, the watchman process was restarted between the time\nthat the value was obtained and the time the query was issued) or is a named\ncursor that has not yet been used in a query, the ",Object(i.b)("inlineCode",{parentName:"p"},"since")," generator will\nconsider the state to be a ",Object(i.b)("em",{parentName:"p"},"fresh instance")," and its behavior is modified:"),Object(i.b)("p",null,"A ",Object(i.b)("em",{parentName:"p"},"fresh instance")," result set will only include files that currently exist\nand will generate file nodes that are always considered to be ",Object(i.b)("inlineCode",{parentName:"p"},"new"),"."),Object(i.b)("p",null,"If the query was configured with the ",Object(i.b)("inlineCode",{parentName:"p"},"empty_on_fresh_instance")," property set to\n",Object(i.b)("inlineCode",{parentName:"p"},"true")," then the result set will be empty and the ",Object(i.b)("inlineCode",{parentName:"p"},"is_fresh_instance")," property\nwill be set to ",Object(i.b)("inlineCode",{parentName:"p"},"true")," in the result object."),Object(i.b)("p",null,"The since generator also knows how to talk to source control;\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"scm-query"}),"you can read more about that here"),"."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"since")," generator does not consider the targets of symlinks. In particular,\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"since")," generator may ",Object(i.b)("em",{parentName:"p"},"not")," produce a symlink in the following cases:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The symlink's target was a file, and the file is since modified."),Object(i.b)("li",{parentName:"ul"},"The symlink's target was a file, and the file is since deleted or replaced\nwith a different file."),Object(i.b)("li",{parentName:"ul"},"An ancestor of the symlink's target was created or deleted or modified."),Object(i.b)("li",{parentName:"ul"},"The symlink's target was a directory, and a file is since added or removed\nfrom that directory.")),Object(i.b)("h3",{id:"suffix-generator"},"Suffix Generator"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"suffix")," generator produces a list of files that have a particular suffix\nor set of suffixes.  The value can be either a string or an array of strings."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ watchman -j <<-EOT\n["query", "/path/to/root", {\n  "suffix": "js"\n}]\nEOT\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ watchman -j <<-EOT\n["query", "/path/to/root", {\n  "suffix": ["js", "css"]\n}]\nEOT\n')),Object(i.b)("p",null,"If the ",Object(i.b)("inlineCode",{parentName:"p"},"suffix")," generator is given an empty array, it produces no files."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"suffix")," generator can produce symlinks."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"suffix")," generator does not follow symlinks. For example, a symlink to\n",Object(i.b)("inlineCode",{parentName:"p"},"/etc")," will not cause a ",Object(i.b)("inlineCode",{parentName:"p"},'"suffix": "conf"')," query to search within ",Object(i.b)("inlineCode",{parentName:"p"},"/etc")," and\nproduce ",Object(i.b)("inlineCode",{parentName:"p"},"/etc/resolv.conf"),"."),Object(i.b)("h3",{id:"glob-generator"},"Glob Generator"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Since 4.7.")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"glob")," generator produces a list of files by matching against your\ninput list of patterns.  It does this by building a tree from the glob\nexpression(s) and walking both the expression and the in-memory filesystem\ntree concurrently."),Object(i.b)("p",null,"This query will yield a list of all of the C source and header files found\ndirectly in the ",Object(i.b)("inlineCode",{parentName:"p"},"src")," dir:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'$ watchman -j <<-EOT\n["query", "/path/to/root", {\n  "glob": ["src/*.c", "src/*.h"],\n  "fields": ["name"]\n}]\n')),Object(i.b)("p",null,"This query will yield a list of all of the C source and header files found\nin any subdirectories of the root:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'$ watchman -j <<-EOT\n["query", "/path/to/root", {\n  "glob": ["**/*.c", "**/*.h"],\n  "fields": ["name"]\n}]\n')),Object(i.b)("p",null,"Note that it is more efficient to use the ",Object(i.b)("inlineCode",{parentName:"p"},"suffix")," generator together with a\n",Object(i.b)("inlineCode",{parentName:"p"},"dirname")," expression term for such a broadly scoped query as it results in\nfewer comparisons.  This example is included as an illustration of recursive\nglobbing."),Object(i.b)("p",null,"The glob generator implicitly enables ",Object(i.b)("inlineCode",{parentName:"p"},"dedup_results")," mode."),Object(i.b)("p",null,"If the ",Object(i.b)("inlineCode",{parentName:"p"},"glob")," generator is given an empty array, it produces no files."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"glob")," generator can produce symlinks."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"glob")," generator does not follow symlinks. For example, a symlink to ",Object(i.b)("inlineCode",{parentName:"p"},"/etc"),"\nwill not cause a ",Object(i.b)("inlineCode",{parentName:"p"},'"glob": ["**/resolv.conf"]')," query to search within ",Object(i.b)("inlineCode",{parentName:"p"},"/etc")," and\nproduce ",Object(i.b)("inlineCode",{parentName:"p"},"/etc/resolv.conf"),"."),Object(i.b)("h3",{id:"path-generator"},"Path Generator"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"path")," generator produces a list of files based on their path and depth.\nDepth controls how far watchman will search down the directory tree for files."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"path")," generator expects an array of path specifiers.  Each path specifier\ncan be either a string or an object and each will produce a set of files."),Object(i.b)("p",null,"If it is a string then it is treated as the value for ",Object(i.b)("inlineCode",{parentName:"p"},"path")," with ",Object(i.b)("inlineCode",{parentName:"p"},"depth")," set\nto infinite.  If an object, the fields ",Object(i.b)("inlineCode",{parentName:"p"},"path")," (a string) and ",Object(i.b)("inlineCode",{parentName:"p"},"depth")," (an\ninteger) must be supplied."),Object(i.b)("p",null,"Paths are relative to the root, so if watchman is watching ",Object(i.b)("inlineCode",{parentName:"p"},"/foo/"),", path ",Object(i.b)("inlineCode",{parentName:"p"},"bar"),"\nrefers to ",Object(i.b)("inlineCode",{parentName:"p"},"/foo/bar"),"."),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"depth")," value of ",Object(i.b)("inlineCode",{parentName:"p"},"0")," means only files and directories which are contained in\nthis path.  A ",Object(i.b)("inlineCode",{parentName:"p"},"depth")," value of ",Object(i.b)("inlineCode",{parentName:"p"},"-1")," means no limit on the depth."),Object(i.b)("p",null,"The following ",Object(i.b)("inlineCode",{parentName:"p"},"path")," generators are equivalent:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'$ watchman -j <<-EOT\n["query", "/path/to/root", {\n  "path": ["bar"]\n}]\nEOT\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'$ watchman -j <<-EOT\n["query", "/path/to/root", {\n  "path": [{"path": "bar", "depth": -1}]\n}]\nEOT\n')),Object(i.b)("p",null,"If the ",Object(i.b)("inlineCode",{parentName:"p"},"path")," generator is given an empty array, it produces no files."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"path")," generator can produce symlinks."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"path")," generator does not follow symlinks."),Object(i.b)("h3",{id:"all-generator"},"All Generator"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"all")," generator produces a list of all file nodes.  It is the default\ngenerator and is used in the case where no other generators were explicitly\nspecified."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ watchman -j <<-EOT\n["query", "/path/to/root", {\n}]\nEOT\n')),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"all")," generator can produce symlinks."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"all")," generator does not follow symlinks."),Object(i.b)("h3",{id:"expressions"},"Expressions"),Object(i.b)("p",null,"A watchman query expression consists of 0 or more expression terms.  If no\nterms are provided then each file evaluated is considered a match (equivalent\nto specifying a single ",Object(i.b)("inlineCode",{parentName:"p"},"true")," expression term)."),Object(i.b)("p",null,"Otherwise, the expression is evaluated against the file and produces a boolean\nresult.  If that result is true then the file is considered a match and is\nadded to the output set."),Object(i.b)("p",null,"An expression term is canonically represented as a JSON array whose zeroth\nelement is a string containing the term name."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'["termname", arg1, arg2]\n')),Object(i.b)("p",null,"If the term accepts no arguments you may use a short form that consists of just\nthe term name expressed as a string:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'"true"\n')),Object(i.b)("p",null,"Expressions that match against file names may match against either the\n",Object(i.b)("em",{parentName:"p"},"basename")," or the ",Object(i.b)("em",{parentName:"p"},"wholename")," of the file.  The basename is the name of the\nfile within its containing directory.  The wholename is the name of the file\nrelative to the watched root."),Object(i.b)("p",null,"You can find a list of all possible expression terms in the sidebar on the left\nof this page."),Object(i.b)("h3",{id:"relative-roots"},"Relative roots"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Since 3.3.")),Object(i.b)("p",null,"Watchman supports optionally evaluating queries with respect to a path within a\nwatched root. This is used with the ",Object(i.b)("inlineCode",{parentName:"p"},"relative_root")," parameter:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'["query", "/path/to/watched/root", {\n  "relative_root": "project1",\n}]\n')),Object(i.b)("p",null,"Setting a relative root results in the following modifications to queries:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"path")," generator is evaluated with respect to the relative root. In the\nabove example, ",Object(i.b)("inlineCode",{parentName:"li"},'"path": ["dir"]')," will return all files inside\n",Object(i.b)("inlineCode",{parentName:"li"},"/path/to/watched/root/project1/dir"),"."),Object(i.b)("li",{parentName:"ul"},"The input expression is evaluated with respect to the relative root. In the\nabove example, ",Object(i.b)("inlineCode",{parentName:"li"},'"expression": ["match", "dir/*.txt", "wholename"]')," will return\nall files inside ",Object(i.b)("inlineCode",{parentName:"li"},"/path/to/watched/root/project1/dir/")," that match the glob\n",Object(i.b)("inlineCode",{parentName:"li"},"*.txt"),"."),Object(i.b)("li",{parentName:"ul"},"Paths inside the relative root are returned with the relative root stripped\noff. For example, a path ",Object(i.b)("inlineCode",{parentName:"li"},"project1/dir/file.txt")," would be returned as\n",Object(i.b)("inlineCode",{parentName:"li"},"dir/file.txt"),"."),Object(i.b)("li",{parentName:"ul"},"Paths outside the relative root are not returned.")),Object(i.b)("p",null,"Relative roots behave similarly to a separate Watchman watch on the\nsubdirectory, without any of the system overhead that that imposes. This is\nuseful for large repositories, where your script or tool is only interested in a\nparticular directory inside the repository."))}p.isMDXComponent=!0},204:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},b=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(n),d=a,h=b["".concat(o,".").concat(d)]||b[d]||u[d]||i;return n?r.a.createElement(h,l({ref:t},c,{components:n})):r.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);